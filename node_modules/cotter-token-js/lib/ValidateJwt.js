"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios = __importStar(require("axios"));
const jwk_to_pem_1 = __importDefault(require("jwk-to-pem"));
const jsonwebtoken = __importStar(require("jsonwebtoken"));
const jwksPath = "/token/jwks";
const jwtAlgo = "ES256";
let cacheKeys;
const getPublicKeys = (cotterBaseURL) => __awaiter(void 0, void 0, void 0, function* () {
    if (!cacheKeys) {
        const url = `${cotterBaseURL}${jwksPath}`;
        const publicKeys = yield axios.default.get(url);
        cacheKeys = publicKeys.data.keys.reduce((agg, current) => {
            const pem = jwk_to_pem_1.default(current);
            agg[current.kid] = { instance: current, pem };
            return agg;
        }, {});
        return cacheKeys;
    }
    else {
        return cacheKeys;
    }
});
const ValidateJwt = (cotterBaseURL, jwtKid, token) => __awaiter(void 0, void 0, void 0, function* () {
    const jwtKeys = yield getPublicKeys(cotterBaseURL);
    const pubKey = jwtKeys[jwtKid];
    let errResp;
    jsonwebtoken.verify(token, pubKey.pem, { algorithms: [jwtAlgo] }, function (err) {
        errResp = err;
    });
    if (errResp) {
        console.log(errResp);
        throw new Error("Access token is inavlid" + JSON.stringify(errResp));
    }
    return true;
});
exports.default = ValidateJwt;
